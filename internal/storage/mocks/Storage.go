// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "comments_service/graph/model"

	mock "github.com/stretchr/testify/mock"

	models "comments_service/internal/models"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storage) AddComment(_a0 model.SComment, _a1 []chan *model.RComment, _a2 []int) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.SComment, []chan *model.RComment, []int) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePost provides a mock function with given fields: _a0
func (_m *Storage) CreatePost(_a0 models.Post) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Post) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsCommentable provides a mock function with given fields: _a0
func (_m *Storage) IsCommentable(_a0 *string) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsCommentable")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLoginExist provides a mock function with given fields: _a0
func (_m *Storage) IsLoginExist(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsLoginExist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostAndComment provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storage) PostAndComment(_a0 *string, _a1 int, _a2 int) (*model.PostWithComment, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for PostAndComment")
	}

	var r0 *model.PostWithComment
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, int, int) (*model.PostWithComment, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(*string, int, int) *model.PostWithComment); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostWithComment)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, int, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Posts provides a mock function with given fields: _a0, _a1
func (_m *Storage) Posts(_a0 int, _a1 int) ([]*model.Post, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Posts")
	}

	var r0 []*model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*model.Post, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*model.Post); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0
func (_m *Storage) Register(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

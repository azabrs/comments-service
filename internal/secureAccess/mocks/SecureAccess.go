// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "comments_service/graph/model"

	mock "github.com/stretchr/testify/mock"

	storage "comments_service/internal/storage"
)

// SecureAccess is an autogenerated mock type for the SecureAccess type
type SecureAccess struct {
	mock.Mock
}

// Authentication provides a mock function with given fields: IdentificationData, stor
func (_m *SecureAccess) Authentication(IdentificationData model.IdentificationData, stor storage.Storage) error {
	ret := _m.Called(IdentificationData, stor)

	if len(ret) == 0 {
		panic("no return value specified for Authentication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.IdentificationData, storage.Storage) error); ok {
		r0 = rf(IdentificationData, stor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Authorize provides a mock function with given fields: login
func (_m *SecureAccess) Authorize(login string) (string, error) {
	ret := _m.Called(login)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(login)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSecureAccess creates a new instance of SecureAccess. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecureAccess(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecureAccess {
	mock := &SecureAccess{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
